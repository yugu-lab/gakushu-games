<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>１月～１２月英単語ババ抜き</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            color: white;
        }
        
        .game-container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .title {
            text-align: center;
            font-size: 2.5rem;
            margin-bottom: 30px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .game-board {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            gap: 20px;
            height: 480px;
            margin-bottom: 30px;
            position: relative;
        }
        
        .center-emoji {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 100;
        }
        
        .direction-arrow {
            font-size: 3rem;
            color: #ffeb3b;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            animation: rotate 3s linear infinite;
        }
        
        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .pair-submit-btn {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
            border: none;
            padding: 15px 25px;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 6px 20px rgba(255,107,107,0.4);
        }
        
        .pair-submit-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(255,107,107,0.6);
        }
        
        .pair-submit-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        .turn-indicator {
            position: absolute;
            font-size: 2rem;
            color: #ffeb3b;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            z-index: 10;
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }
        
        .turn-indicator.player { top: 50%; left: -30px; }
        .turn-indicator.cpu1 { top: -30px; left: 50%; transform: translateX(-50%); }
        .turn-indicator.cpu3 { top: -30px; right: 50%; transform: translateX(50%); }
        .turn-indicator.cpu2 { bottom: -30px; right: 50%; transform: translateX(50%); }
        
        .player-area {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255,255,255,0.2);
        }
        
        .player-name {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .turn-emoji {
            font-size: 1.5rem;
            animation: bounce 1s infinite;
        }
        
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        
        .cards-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            justify-content: center;
            align-items: center;
            height: calc(100% - 50px);
        }
        
        .card {
            width: clamp(56px, 12vw, 80px);
            height: clamp(78px, 16.5vw, 110px);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            line-height: 1.2;
        }
        
        .card.japanese {
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            color: #333;
        }
        
        .card.english {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            color: #333;
        }
        
        .card.joker {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        }
        
        .card.selected {
            transform: translateY(-10px);
            box-shadow: 0 10px 25px rgba(255,215,0,0.5);
            border: 3px solid #ffd700;
        }
        
        .pair-controls {
            text-align: center;
            margin-top: 15px;
        }
        
        .player-pair-button {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 0.9rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255,107,107,0.4);
            margin-top: 10px;
        }
        
        .player-pair-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255,107,107,0.6);
        }
        
        .player-pair-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        .selected-cards {
            margin-top: 10px;
            font-size: 0.9rem;
            color: #ffd700;
        }
        
        .card-back {
            background: linear-gradient(135deg, #4a4a4a 0%, #2c2c2c 100%);
            color: white;
        }
        
        .cpu-cards {
            display: flex;
            gap: 5px;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .card-count {
            font-size: 1.1rem;
            text-align: center;
            margin-top: 10px;
        }
        
        .controls {
            text-align: center;
            margin-bottom: 20px;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 1rem;
            cursor: pointer;
            margin: 0 10px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }
        
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        .message {
            text-align: center;
            font-size: 1.2rem;
            margin: 20px 0;
            min-height: 30px;
            font-weight: bold;
        }
        
        .mistake-counter {
            text-align: center;
            font-size: 1.1rem;
            margin: 10px 0;
            color: #ff6b6b;
            font-weight: bold;
        }
        
        .pair-animation {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.9);
            color: white;
            padding: 30px 50px;
            border-radius: 20px;
            font-size: 1.5rem;
            z-index: 1000;
            animation: pairShow 3s ease-in-out;
            text-align: center;
            width: auto;
            max-width: 80vw;
            pointer-events: none;
        }
        
        @keyframes pairShow {
            0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
            20% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
            80% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
            100% { opacity: 0; transform: translate(-50%, -50%) scale(1); }
        }
        
        .card-draw-animation {
            position: fixed;
            width: 80px;
            height: 110px;
            border-radius: 8px;
            z-index: 1500;
            pointer-events: none;
        }
        
        @keyframes cardDraw {
            0% { transform: scale(1); }
            50% { transform: scale(1.3) rotate(10deg); }
            100% { transform: scale(1) rotate(0deg); }
        }
        
        .game-over {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }
        
        .game-over-content {
            background: white;
            color: #333;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            max-width: 400px;
        }
        
        .game-over h2 {
            margin-top: 0;
            font-size: 2rem;
        }
        
        .rules-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 3000;
        }
        
        .rules-content {
            background: white;
            color: #333;
            padding: 40px;
            border-radius: 20px;
            text-align: left;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .rules-content h2 {
            margin-top: 0;
            font-size: 2rem;
            text-align: center;
            color: #667eea;
        }
        
        .rules-content ul {
            line-height: 1.8;
            margin: 20px 0;
        }
        
        .rules-content li {
            margin: 10px 0;
        }
        
        .start-game-btn {
            background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            margin: 20px auto;
            display: block;
            transition: all 0.3s ease;
            box-shadow: 0 6px 20px rgba(76,175,80,0.4);
        }
        
        .start-game-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(76,175,80,0.6);
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="title">🗓️ １月～１２月英単語ババ抜き 🗓️</h1>
        
        <div class="controls">
            <button class="btn" onclick="backToRules()" aria-label="最初に戻る">最初に戻る</button>
            <button class="btn" onclick="toggleSound()" id="sound-btn">音声ON</button>
        </div>
        
        <div class="rules-screen" id="rules-screen">
            <div class="rules-content">
                <h2>🗓️ １月～１２月英単語ババ抜き</h2>
                
                <h3>🎯 ルール</h3>
                <ul>
                    <li><strong>ペア作り：</strong>同じ月の日本語と英語のカードでペアを作ります<br>
                        例：「1月」と「January」、「2月」と「February」</li>
                    <li><strong>ババカード：</strong>ペアにならない英語カードが1枚あります（秘密）</li>
                    <li><strong>ターン順：</strong>あなた → CPU1 → CPU2 → CPU3 の時計回り</li>
                    <li><strong>カード引き：</strong>次のプレイヤーからカードを1枚引きます</li>
                    <li><strong>ペア提出：</strong>いつでも「ペア提出」ボタンでペアを作れます</li>
                    <li><strong>間違いペナルティ：</strong>間違ったペアを2回作ると失格</li>
                </ul>
                
                <h3>🏆 勝利条件</h3>
                <p>手札を最初になくしたプレイヤーの勝利！<br>
                最後にババカードを持っているプレイヤーの負けです。</p>
                
                <h3>📅 月の英単語対応表</h3>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0; background: #f5f5f5; padding: 20px; border-radius: 10px;">
                    <div>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9rem;">
                            <div style="font-weight: bold; color: #ff6b6b;">1月</div><div style="color: #4caf50;">January</div>
                            <div style="font-weight: bold; color: #ff6b6b;">2月</div><div style="color: #4caf50;">February</div>
                            <div style="font-weight: bold; color: #ff6b6b;">3月</div><div style="color: #4caf50;">March</div>
                            <div style="font-weight: bold; color: #ff6b6b;">4月</div><div style="color: #4caf50;">April</div>
                            <div style="font-weight: bold; color: #ff6b6b;">5月</div><div style="color: #4caf50;">May</div>
                            <div style="font-weight: bold; color: #ff6b6b;">6月</div><div style="color: #4caf50;">June</div>
                        </div>
                    </div>
                    <div>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9rem;">
                            <div style="font-weight: bold; color: #ff6b6b;">7月</div><div style="color: #4caf50;">July</div>
                            <div style="font-weight: bold; color: #ff6b6b;">8月</div><div style="color: #4caf50;">August</div>
                            <div style="font-weight: bold; color: #ff6b6b;">9月</div><div style="color: #4caf50;">September</div>
                            <div style="font-weight: bold; color: #ff6b6b;">10月</div><div style="color: #4caf50;">October</div>
                            <div style="font-weight: bold; color: #ff6b6b;">11月</div><div style="color: #4caf50;">November</div>
                            <div style="font-weight: bold; color: #ff6b6b;">12月</div><div style="color: #4caf50;">December</div>
                        </div>
                    </div>
                </div>
                
                <h3>💡 コツ</h3>
                <ul>
                    <li>上の対応表を参考に正しいペアを作りましょう</li>
                    <li>どのカードがババかを推理しましょう</li>
                    <li>間違いは2回までなので慎重に！</li>
                    <li>発音も聴こう！ペアが成立すると英語の発音が聞けます</li>
                </ul>
                
                <button class="start-game-btn" onclick="startGameFromRules()">ゲーム開始！</button>
            </div>
        </div>
        
        <div class="message" id="message" aria-live="polite" role="status">ルール説明ボタンを押してゲームを始めましょう</div>
        <div class="mistake-counter" id="mistake-counter"></div>
        
        <div class="game-board" id="game-board">
            <div class="player-area">
                <div class="player-name" id="player-name">
                    <button class="player-pair-button" id="player-pair-btn" onclick="handlePairButton()" aria-label="ペア提出">ペア提出</button>
                    👤 あなた <span class="turn-emoji" id="player-turn" style="display: none;">⭐</span>
                </div>
                <div class="cards-container" id="player-cards"></div>
                <div class="selected-cards" id="selected-cards" style="color: #ffd700; font-size: 0.9rem; margin-top: 10px;"></div>
                <div class="pair-controls" id="pair-controls" style="display: none;">
                    <button class="btn" onclick="submitSelectedPair()">選択したペアを提出</button>
                </div>
            </div>
            
            <div class="player-area">
                <div class="player-name" id="cpu1-name">🤖 CPU1 <span class="turn-emoji" id="cpu1-turn" style="display: none;">⭐</span></div>
                <div class="cards-container">
                    <div class="cpu-cards" id="cpu1-cards"></div>
                    <div class="card-count" id="cpu1-count">カード: 0枚</div>
                </div>
            </div>
            
            <div class="player-area">
                <div class="player-name" id="cpu3-name">🤖 CPU3 <span class="turn-emoji" id="cpu3-turn" style="display: none;">⭐</span></div>
                <div class="cards-container">
                    <div class="cpu-cards" id="cpu3-cards"></div>
                    <div class="card-count" id="cpu3-count">カード: 0枚</div>
                </div>
            </div>
            
            <div class="player-area">
                <div class="player-name" id="cpu2-name">🤖 CPU2 <span class="turn-emoji" id="cpu2-turn" style="display: none;">⭐</span></div>
                <div class="cards-container">
                    <div class="cpu-cards" id="cpu2-cards"></div>
                    <div class="card-count" id="cpu2-count">カード: 0枚</div>
                </div>
            </div>
            

        </div>
    </div>

    <script>
        const months = {
            japanese: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
            english: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
        };

        let gameState = {
            players: [
                { name: 'player', cards: [], isHuman: true, rank: null },
                { name: 'cpu1', cards: [], isHuman: false, rank: null },
                { name: 'cpu2', cards: [], isHuman: false, rank: null },
                { name: 'cpu3', cards: [], isHuman: false, rank: null }
            ],
            currentPlayer: 0,
            jokerCard: null,
            gameStarted: false,
            waitingForPlayerChoice: false,
            mistakes: 0,
            maxMistakes: 2,
            selectedCards: [],
            waitingForPairSubmission: false,
            inPairPhase: false,
            gameFlow: true,
            finishedPlayers: [],
            currentRank: 1,
            soundOn: true
        };

        function createDeck() {
            const deck = [];
            
            // 日本語カードを追加
            months.japanese.forEach((month, index) => {
                deck.push({ type: 'japanese', value: month, id: index });
            });
            
            // 英語カードを追加
            months.english.forEach((month, index) => {
                deck.push({ type: 'english', value: month, id: index });
            });
            
            return deck;
        }

        function shuffleDeck(deck) {
            for (let i = deck.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [deck[i], deck[j]] = [deck[j], deck[i]];
            }
            return deck;
        }

        function startGame() {
            // デッキを作成してシャッフル
            let deck = createDeck();
            deck = shuffleDeck(deck);
            
            // ランダムに日本語カードを1枚選んでババを決定
            const japaneseCards = deck.filter(card => card.type === 'japanese');
            const removedJapanese = japaneseCards[Math.floor(Math.random() * japaneseCards.length)];
            
            // 対応する英語カードをババにする
            gameState.jokerCard = { type: 'english', value: months.english[removedJapanese.id], id: removedJapanese.id };
            
            // 選ばれた日本語カードをデッキから除去
            deck = deck.filter(card => !(card.type === 'japanese' && card.id === removedJapanese.id));
            
            // ペアができないようにカードを配る
            gameState.players.forEach(player => player.cards = []);
            distributeCardsWithoutPairs(deck);
            
            gameState.currentPlayer = 0;
            gameState.gameStarted = true;
            gameState.waitingForPlayerChoice = false;
            gameState.mistakes = 0;
            gameState.inPairPhase = false;
            gameState.gameFlow = true;
            
            updateDisplay();
            updateMistakeCounter();
            setMessage(`ゲーム開始！どのカードがババかは秘密です。`);
            
            setTimeout(() => {
                nextTurn();
            }, 2000);
        }
        
        function distributeCardsWithoutPairs(deck) {
            const maxAttempts = 100;
            let attempts = 0;
            
            while (attempts < maxAttempts) {
                // カードをリセット
                gameState.players.forEach(player => player.cards = []);
                
                // カードを配る
                const shuffledDeck = [...deck];
                shuffleDeck(shuffledDeck);
                
                for (let i = 0; i < shuffledDeck.length; i++) {
                    gameState.players[i % 4].cards.push(shuffledDeck[i]);
                }
                
                // 全プレイヤーにペアがないかチェック
                let hasPairs = false;
                for (let player of gameState.players) {
                    if (hasInitialPairs(player)) {
                        hasPairs = true;
                        break;
                    }
                }
                
                if (!hasPairs) {
                    return; // ペアがない配布が完了
                }
                
                attempts++;
            }
            
            // 最大試行回数に達した場合、そのまま配布（稀なケース）
            console.log('ペアなし配布の試行回数上限に達しました');
        }
        
        function hasInitialPairs(player) {
            for (let i = 0; i < player.cards.length; i++) {
                for (let j = i + 1; j < player.cards.length; j++) {
                    const card1 = player.cards[i];
                    const card2 = player.cards[j];
                    if (card1.id === card2.id && card1.type !== card2.type) {
                        return true;
                    }
                }
            }
            return false;
        }

        function checkAndRemovePairs(player) {
            const pairs = [];
            const remainingCards = [];
            
            for (let i = 0; i < player.cards.length; i++) {
                const card = player.cards[i];
                let foundPair = false;
                
                for (let j = i + 1; j < player.cards.length; j++) {
                    const otherCard = player.cards[j];
                    
                    if (card.id === otherCard.id && card.type !== otherCard.type) {
                        pairs.push([card, otherCard]);
                        player.cards.splice(j, 1);
                        foundPair = true;
                        break;
                    }
                }
                
                if (!foundPair) {
                    remainingCards.push(card);
                }
            }
            
            player.cards = remainingCards;
            
            // ペアが見つかった場合のアニメーション
            pairs.forEach((pair, index) => {
                setTimeout(() => {
                    showPairAnimation(pair[0], pair[1]);
                }, index * 1000);
            });
            
            return pairs.length > 0;
        }

        function checkForFinishedPlayers() {
            gameState.players.forEach(player => {
                if (player.cards.length === 0 && player.rank === null) {
                    player.rank = gameState.currentRank;
                    gameState.finishedPlayers.push(player);
                    gameState.currentRank++;
                    
                    // 順位発表ポップアップ
                    showRankAnnouncement(player);
                }
            });
        }
        
        function showRankAnnouncement(player) {
            const playerName = player.isHuman ? 'あなた' : player.name.toUpperCase();
            const rankText = getRankText(player.rank);
            
            const announcement = document.createElement('div');
            announcement.className = 'pair-animation';
            announcement.innerHTML = `
                <div style="font-size: 2rem; color: #4caf50; font-weight: bold; margin-bottom: 20px;">🎉 ${rankText}！ 🎉</div>
                <div style="font-size: 1.5rem;">${playerName}がカードを全て出し切りました！</div>
            `;
            
            document.body.appendChild(announcement);
            
            setTimeout(() => {
                if (document.body.contains(announcement)) {
                    document.body.removeChild(announcement);
                }
            }, 3000);
        }
        
        function getRankText(rank) {
            switch(rank) {
                case 1: return '1位';
                case 2: return '2位';
                case 3: return '3位';
                case 4: return '4位';
                default: return `${rank}位`;
            }
        }

        function showPairAnimation(card1, card2) {
            const animation = document.createElement('div');
            animation.className = 'pair-animation';
            
            // 2枚のカードを大きく表示
            animation.innerHTML = `
                <div style="display: flex; gap: 30px; align-items: center;">
                    <div class="card ${card1.type}" style="width: 120px; height: 160px; font-size: 1.2rem; display: flex; align-items: center; justify-content: center; text-align: center; line-height: 1.2;">${card1.value}</div>
                    <div style="font-size: 2rem; color: #ffeb3b;">↔</div>
                    <div class="card ${card2.type}" style="width: 120px; height: 160px; font-size: 1.2rem; display: flex; align-items: center; justify-content: center; text-align: center; line-height: 1.2;">${card2.value}</div>
                </div>
                <div style="margin-top: 20px; font-size: 1.5rem; color: #4caf50; font-weight: bold;">ペア成立！</div>
            `;
            
            document.body.appendChild(animation);
            
            // 英単語の読み上げ（可能な場合）
            speakEnglishWord(card1, card2);
            
            setTimeout(() => {
                if (document.body.contains(animation)) {
                    document.body.removeChild(animation);
                }
            }, 3000);
        }
        
        function speakEnglishWord(card1, card2) {
            // 音声合成がサポートされているかチェック
            if ('speechSynthesis' in window && gameState.soundOn) {
                const englishCard = card1.type === 'english' ? card1 : card2;
                const utterance = new SpeechSynthesisUtterance(englishCard.value);
                utterance.lang = 'en-US';
                utterance.rate = 0.8;
                utterance.volume = 0.7;
                
                try {
                    speechSynthesis.speak(utterance);
                } catch (error) {
                    console.log('音声読み上げに失敗しました:', error);
                }
            }
        }
        
        function speakCard(card) {
            // 音声合成がサポートされているかチェック
            if ('speechSynthesis' in window && gameState.soundOn) {
                const utterance = new SpeechSynthesisUtterance(card.value);
                
                if (card.type === 'english') {
                    utterance.lang = 'en-US';
                } else {
                    utterance.lang = 'ja-JP';
                }
                
                utterance.rate = 0.8;
                utterance.volume = 0.7;
                
                try {
                    speechSynthesis.speak(utterance);
                } catch (error) {
                    console.log('音声読み上げに失敗しました:', error);
                }
            }
        }

        function nextTurn() {
            if (!gameState.gameStarted || !gameState.gameFlow) return;
            
            // 失格チェック
            if (gameState.mistakes >= gameState.maxMistakes) {
                endGameByMistakes();
                return;
            }
            
            // カードがなくなったプレイヤーをチェック
            checkForFinishedPlayers();
            
            // ゲーム終了チェック
            const playersWithCards = gameState.players.filter(p => p.cards.length > 0 && p.rank === null);
            if (playersWithCards.length <= 1) {
                endGame();
                return;
            }
            
            const currentPlayer = gameState.players[gameState.currentPlayer];
            
            if (currentPlayer.cards.length === 0) {
                // 現在のプレイヤーがカードを持っていない場合、次のプレイヤーへ
                gameState.currentPlayer = (gameState.currentPlayer + 1) % 4;
                nextTurn();
                return;
            }
            
            updateTurnIndicator();
            
            // カードを持っている次のプレイヤーを探す
            let nextPlayerIndex = (gameState.currentPlayer + 1) % 4;
            let attempts = 0;
            while (attempts < 4) {
                const nextPlayer = gameState.players[nextPlayerIndex];
                if (nextPlayer.cards.length > 0) {
                    // カードを持っているプレイヤーが見つかった
                    if (currentPlayer.isHuman) {
                        setMessage(`${nextPlayer.name.toUpperCase()}からカードを1枚選んでください`);
                        gameState.waitingForPlayerChoice = true;
                        highlightSpecificCPU(nextPlayer.name);
                    } else {
                        setMessage(`${currentPlayer.name.toUpperCase()}のターン`);
                        setTimeout(() => {
                            if (!gameState.gameFlow || gameState.inPairPhase) return; // ★ガード
                            cpuTurn(currentPlayer, nextPlayer);
                        }, 1000);
                    }
                    return;
                }
                nextPlayerIndex = (nextPlayerIndex + 1) % 4;
                attempts++;
            }
            
            // 誰もカードを持っていない場合（通常は起こらない）
            endGame();
        }
        
        function updateTurnIndicator() {
            // 全ての絵文字を隠す
            ['player-turn', 'cpu1-turn', 'cpu2-turn', 'cpu3-turn'].forEach(id => {
                const element = document.getElementById(id);
                if (element) element.style.display = 'none';
            });
            
            // 現在のプレイヤーの絵文字を表示
            const currentPlayer = gameState.players[gameState.currentPlayer];
            const turnElement = document.getElementById(`${currentPlayer.name}-turn`);
            if (turnElement) {
                turnElement.style.display = 'inline';
            }
        }

        function highlightSpecificCPU(cpuName) {
            // まず全てのハイライトを削除
            removeHighlight();
            
            // 指定されたCPUのカードのみクリック可能にする
            const cpu = gameState.players.find(p => p.name === cpuName);
            if (cpu.cards.length > 0) {
                const cardsContainer = document.getElementById(`${cpuName}-cards`);
                const cardElements = cardsContainer.children;
                
                for (let i = 0; i < cardElements.length; i++) {
                    const cardElement = cardElements[i];
                    cardElement.style.cursor = 'pointer';
                    cardElement.style.transform = 'translateY(-5px)';
                    cardElement.style.boxShadow = '0 8px 20px rgba(255,215,0,0.5)';
                    cardElement.onclick = () => playerDrawFromCPU(cpuName, i);
                }
            }
        }
        
        function highlightCPUCards() {
            // 全CPUのカードをクリック可能にする（旧機能、互換性のため残す）
            ['cpu1', 'cpu2', 'cpu3'].forEach(cpuName => {
                const cpu = gameState.players.find(p => p.name === cpuName);
                if (cpu.cards.length > 0) {
                    const cardsContainer = document.getElementById(`${cpuName}-cards`);
                    const cardElements = cardsContainer.children;
                    
                    for (let i = 0; i < cardElements.length; i++) {
                        const cardElement = cardElements[i];
                        cardElement.style.cursor = 'pointer';
                        cardElement.onclick = () => playerDrawFromCPU(cpuName, i);
                    }
                }
            });
        }

        function removeHighlight() {
            ['cpu1', 'cpu2', 'cpu3'].forEach(cpuName => {
                const cardsContainer = document.getElementById(`${cpuName}-cards`);
                if (cardsContainer) {
                    const cardElements = cardsContainer.children;
                    for (let i = 0; i < cardElements.length; i++) {
                        const cardElement = cardElements[i];
                        cardElement.style.cursor = 'default';
                        cardElement.style.transform = '';
                        cardElement.style.boxShadow = '';
                        cardElement.onclick = null;
                    }
                }
            });
        }

        function playerDrawFromCPU(cpuName, cardIndex) {
            if (!gameState.waitingForPlayerChoice) return;
            
            const cpu = gameState.players.find(p => p.name === cpuName);
            if (cpu.cards.length === 0 || cardIndex >= cpu.cards.length) return;
            
            gameState.waitingForPlayerChoice = false;
            removeHighlight();
            
            // 指定されたカードを引く
            const drawnCard = cpu.cards.splice(cardIndex, 1)[0];
            
            // カード引きアニメーション
            showCardDrawAnimation(cpuName, drawnCard, cardIndex);
            
            const player = gameState.players[0];
            player.cards.push(drawnCard);
            
            setMessage(`${cpuName.toUpperCase()}からカードを引きました: ${drawnCard.value}`);
            
            // 引いたカードを読み上げ
            speakCard(drawnCard);
            
            setTimeout(() => {
                updateDisplay();
                
                // 3秒後に自動的に次のターンに進む
                setTimeout(() => {
                    gameState.currentPlayer = (gameState.currentPlayer + 1) % 4;
                    nextTurn();
                }, 3000);
            }, 1000);
        }
        
        function showCardDrawAnimation(fromPlayer, card, cardIndex) {
            const fromCardsContainer = document.getElementById(`${fromPlayer}-cards`);
            const toElement = document.getElementById('player-cards');
            
            if (!fromCardsContainer || !toElement) return;
            
            // 特定のカードの位置を取得
            const cardElements = fromCardsContainer.children;
            const specificCard = cardElements[cardIndex];
            
            if (!specificCard) return;
            
            const fromRect = specificCard.getBoundingClientRect();
            const toRect = toElement.getBoundingClientRect();
            
            const animationCard = document.createElement('div');
            animationCard.className = `card-draw-animation card ${card.type}`;
            // ババカードでも色を変えない（秘密にする）
            animationCard.textContent = card.value;
            
            animationCard.style.left = fromRect.left + 'px';
            animationCard.style.top = fromRect.top + 'px';
            animationCard.style.animation = 'cardDraw 1s ease-in-out';
            
            document.body.appendChild(animationCard);
            
            // 元のカードを一時的に隠す
            specificCard.style.opacity = '0';
            
            // アニメーション終了後に削除
            setTimeout(() => {
                if (animationCard.parentNode) {
                    document.body.removeChild(animationCard);
                }
            }, 1000);
        }
        
        function checkForWrongPair(player, drawnCard) {
            // 引いたカードが既存のカードとペアになるかチェック
            let foundCorrectPair = false;
            for (let card of player.cards) {
                if (card !== drawnCard && card.id === drawnCard.id && card.type !== drawnCard.type) {
                    foundCorrectPair = true;
                    break;
                }
            }
            
            // ペアにならない場合は間違いとしてカウント
            if (!foundCorrectPair) {
                gameState.mistakes++;
                updateMistakeCounter();
                setMessage(`ペアになりませんでした！ 間違い: ${gameState.mistakes}/${gameState.maxMistakes}`);
            }
        }

        function cpuTurn(cpu, targetPlayer) {
            if (!gameState.gameStarted || !gameState.gameFlow || gameState.inPairPhase) return; // ★
            // カードを持っているプレイヤーからカードを引く
            if (!targetPlayer || targetPlayer.cards.length === 0) {
                // ターゲットプレイヤーがいない場合、次のターンへ
                gameState.currentPlayer = (gameState.currentPlayer + 1) % 4;
                nextTurn();
                return;
            }
            
            const randomIndex = Math.floor(Math.random() * targetPlayer.cards.length);
            const drawnCard = targetPlayer.cards.splice(randomIndex, 1)[0];
            
            cpu.cards.push(drawnCard);
            
            const targetName = targetPlayer.isHuman ? 'あなた' : targetPlayer.name.toUpperCase();
            setMessage(`${cpu.name.toUpperCase()}が${targetName}からカードを引きました`);
            
            setTimeout(() => {
                const foundPair = checkAndRemovePairs(cpu);
                updateDisplay();
                
                setTimeout(() => {
                    // 次のプレイヤーに移る
                    let nextPlayerIndex = (gameState.currentPlayer + 1) % 4;
                    let attempts = 0;
                    
                    // カードを持っているプレイヤーを探す
                    while (attempts < 4) {
                        if (gameState.players[nextPlayerIndex].cards.length > 0) {
                            gameState.currentPlayer = nextPlayerIndex;
                            break;
                        }
                        nextPlayerIndex = (nextPlayerIndex + 1) % 4;
                        attempts++;
                    }
                    
                    nextTurn();
                }, foundPair ? 2000 : 1000);
            }, 2000);
        }

        function updateDisplay() {
            // プレイヤーのカード表示
            const playerCardsContainer = document.getElementById('player-cards');
            playerCardsContainer.innerHTML = '';
            
            gameState.players[0].cards.forEach((card, index) => {
                const cardElement = document.createElement('div');
                cardElement.className = `card ${card.type}`;
                // ババカードでも色を変えない（秘密にする）
                cardElement.textContent = card.value;
                cardElement.dataset.cardIndex = index;
                
                // カード選択機能
                cardElement.onclick = () => selectCard(index);
                
                // 選択状態の反映
                if (gameState.selectedCards.includes(index)) {
                    cardElement.classList.add('selected');
                }
                
                playerCardsContainer.appendChild(cardElement);
            });
            
            // CPUのカード表示
            const cpuOrder = ['cpu1', 'cpu2', 'cpu3'];
            const cpuPlayerIndices = [1, 2, 3]; // プレイヤー配列のインデックス
            
            cpuOrder.forEach((cpuName, index) => {
                const cpu = gameState.players[cpuPlayerIndices[index]];
                const cardsContainer = document.getElementById(`${cpuName}-cards`);
                const countElement = document.getElementById(`${cpuName}-count`);
                
                cardsContainer.innerHTML = '';
                
                for (let i = 0; i < cpu.cards.length; i++) {
                    const cardElement = document.createElement('div');
                    cardElement.className = 'card card-back';
                    cardElement.textContent = '?';
                    cardsContainer.appendChild(cardElement);
                }
                
                countElement.textContent = `カード: ${cpu.cards.length}枚`;
            });
        }

        function endGame() {
            // 残ったプレイヤーに最下位を付ける
            const playersWithCards = gameState.players.filter(p => p.cards.length > 0 && p.rank === null);
            playersWithCards.forEach(player => {
                player.rank = gameState.currentRank;
                gameState.finishedPlayers.push(player);
            });
            
            // 順位順にソート
            const sortedPlayers = [...gameState.players].sort((a, b) => (a.rank || 999) - (b.rank || 999));
            
            const gameOverDiv = document.createElement('div');
            gameOverDiv.className = 'game-over';
            
            const content = document.createElement('div');
            content.className = 'game-over-content';
            content.style.maxWidth = '500px';
            
            let rankingHTML = '<h2>🏆 最終結果 🏆</h2>';
            rankingHTML += '<div style="margin: 20px 0; text-align: left;">';
            
            sortedPlayers.forEach(player => {
                const playerName = player.isHuman ? 'あなた' : player.name.toUpperCase();
                const rankText = getRankText(player.rank);
                const emoji = player.rank === 1 ? '🥇' : player.rank === 2 ? '🥈' : player.rank === 3 ? '🥉' : '😢';
                rankingHTML += `<div style="margin: 10px 0; font-size: 1.2rem; display: flex; align-items: center; gap: 10px;">
                    <span style="width: 40px;">${emoji}</span>
                    <span style="font-weight: bold; width: 60px;">${rankText}</span>
                    <span>${playerName}</span>
                </div>`;
            });
            
            rankingHTML += '</div>';
            rankingHTML += `<div style="margin: 20px 0; padding: 15px; background: #ffebee; border-radius: 10px; color: #333;">
                <div style="font-size: 1.3rem; font-weight: bold; color: #d32f2f; margin-bottom: 10px;">🃏 ババカード</div>
                <div style="font-size: 1.1rem;">${gameState.jokerCard.value}</div>
            </div>`;
            
            const playerRank = gameState.players[0].rank;
            const resultMessage = playerRank === 1 ? '🎉 おめでとうございます！' : 
                                 playerRank <= 2 ? '👏 よく頑張りました！' : 
                                 '💪 次回頑張りましょう！';
            
            rankingHTML += `<div style="margin: 20px 0; font-size: 1.3rem; font-weight: bold; color: #4caf50;">${resultMessage}</div>`;
            rankingHTML += '<button class="btn" onclick="closeGameOver()">閉じる</button>';
            
            content.innerHTML = rankingHTML;
            gameOverDiv.appendChild(content);
            document.body.appendChild(gameOverDiv);
        }
        
        function endGameByMistakes() {
            const gameOverDiv = document.createElement('div');
            gameOverDiv.className = 'game-over';
            
            const content = document.createElement('div');
            content.className = 'game-over-content';
            content.innerHTML = `
                <h2>失格！</h2>
                <p>2回間違えたため失格になりました</p>
                <h3>あなたの負けです！</h3>
                <button class="btn" onclick="closeGameOver()">閉じる</button>
            `;
            
            gameOverDiv.appendChild(content);
            document.body.appendChild(gameOverDiv);
        }
        
        function updateMistakeCounter() {
            const counter = document.getElementById('mistake-counter');
            if (gameState.gameStarted) {
                counter.textContent = `間違い: ${gameState.mistakes}/${gameState.maxMistakes}`;
                if (gameState.mistakes >= gameState.maxMistakes - 1) {
                    counter.style.color = '#ff3333';
                    counter.style.fontSize = '1.3rem';
                }
            } else {
                counter.textContent = '';
            }
        }

        function closeGameOver() {
            const gameOverDiv = document.querySelector('.game-over');
            if (gameOverDiv) {
                document.body.removeChild(gameOverDiv);
            }
        }

        function resetGame() {
            gameState = {
                players: [
                    { name: 'player', cards: [], isHuman: true, rank: null },
                    { name: 'cpu1', cards: [], isHuman: false, rank: null },
                    { name: 'cpu2', cards: [], isHuman: false, rank: null },
                    { name: 'cpu3', cards: [], isHuman: false, rank: null }
                ],
                currentPlayer: 0,
                jokerCard: null,
                gameStarted: false,
                waitingForPlayerChoice: false,
                mistakes: 0,
                maxMistakes: 2,
                selectedCards: [],
                waitingForPairSubmission: false,
                inPairPhase: false,
                gameFlow: true,
                finishedPlayers: [],
                currentRank: 1,
                soundOn: true
            };
            
            updateDisplay();
            updateMistakeCounter();
            setMessage('ルール説明ボタンを押してゲームを始めましょう');
            removeHighlight();
            closeGameOver();
            
            // ペア提出コントロールを隠す
            document.getElementById('pair-controls').style.display = 'none';
            
            // 全てのターン表示を隠す
            ['player-turn', 'cpu1-turn', 'cpu2-turn', 'cpu3-turn'].forEach(id => {
                const element = document.getElementById(id);
                if (element) element.style.display = 'none';
            });
        }

        function backToRules() {
            if (gameState.gameStarted) {
                showConfirmDialog();
            } else {
                resetGame();
                showRules();
            }
        }
        
        function showConfirmDialog() {
            const confirmDiv = document.createElement('div');
            confirmDiv.className = 'game-over';
            confirmDiv.id = 'confirm-dialog';
            
            const content = document.createElement('div');
            content.className = 'game-over-content';
            content.innerHTML = `
                <h2>⚠️ 確認</h2>
                <p style="font-size: 1.1rem; margin: 20px 0; line-height: 1.6;">本当に最初に戻りますか？<br>現在のゲーム進行状況は失われます。</p>
                <div style="display: flex; gap: 15px; justify-content: center; margin-top: 30px;">
                    <button class="btn" style="background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);" onclick="confirmBackToRules()">はい、戻る</button>
                    <button class="btn" style="background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);" onclick="cancelBackToRules()">いいえ、続ける</button>
                </div>
            `;
            
            confirmDiv.appendChild(content);
            document.body.appendChild(confirmDiv);
        }
        
        function confirmBackToRules() {
            closeConfirmDialog();
            resetGame();
            showRules();
        }
        
        function cancelBackToRules() {
            closeConfirmDialog();
        }
        
        function closeConfirmDialog() {
            const confirmDiv = document.getElementById('confirm-dialog');
            if (confirmDiv) {
                document.body.removeChild(confirmDiv);
            }
        }

        function selectCard(cardIndex) {
            if (!gameState.gameStarted || !gameState.inPairPhase) return;
            
            const index = gameState.selectedCards.indexOf(cardIndex);
            if (index > -1) {
                // 既に選択されている場合は選択解除
                gameState.selectedCards.splice(index, 1);
            } else {
                // 新しく選択
                if (gameState.selectedCards.length < 2) {
                    gameState.selectedCards.push(cardIndex);
                }
            }
            
            updateDisplay();
            updateSelectedCardsDisplay();
            
            // プレイヤーボタンの制御
            const playerPairBtn = document.getElementById('player-pair-btn');
            if (gameState.selectedCards.length === 2) {
                playerPairBtn.textContent = 'ペア確定';
                playerPairBtn.disabled = false;
            } else if (gameState.inPairPhase) {
                playerPairBtn.textContent = 'キャンセル';
                playerPairBtn.disabled = false;
            } else {
                playerPairBtn.textContent = 'ペア提出';
                playerPairBtn.disabled = false;
            }
        }
        
        function handlePairButton() {
            if (!gameState.gameStarted) return;
            
            if (!gameState.inPairPhase) {
                // ゲームを一時停止してペア提出フェーズに入る
                gameState.gameFlow = false;
                enterPairPhase();
            } else {
                // ペアを提出する
                if (gameState.selectedCards.length === 2) {
                    submitSelectedPair();
                } else {
                    // ペア提出をキャンセルしてゲーム再開
                    exitPairPhase();
                }
            }
        }
        
        function enterPairPhase() {
            if (!gameState.gameStarted || gameState.inPairPhase) return;
            
            gameState.inPairPhase = true;
            gameState.gameFlow = false;
            gameState.selectedCards = [];
            gameState.waitingForPlayerChoice = false; // ★追加
            removeHighlight(); // ★追加
            
            setMessage('ゲーム一時停止：カードを2枚選んでペアを作るか、キャンセルしてください');
            
            // ボタンのテキストを変更
            document.getElementById('player-pair-btn').textContent = 'キャンセル';
            document.getElementById('player-pair-btn').disabled = false;
            
            updateDisplay();
            updateSelectedCardsDisplay();
        }
        
        function exitPairPhase() {
            gameState.inPairPhase = false;
            gameState.gameFlow = true;
            gameState.selectedCards = [];
            
            // ボタンを元に戻す
            document.getElementById('player-pair-btn').textContent = 'ペア提出';
            document.getElementById('player-pair-btn').disabled = false;
            
            // ペア選択コントロールを隠す
            document.getElementById('pair-controls').style.display = 'none';
            
            // 選択表示を確実に消す
            document.getElementById('selected-cards').textContent = '';
            
            updateDisplay();
            updateSelectedCardsDisplay();
        }
        
        function updateSelectedCardsDisplay() {
            const selectedCardsDiv = document.getElementById('selected-cards');
            if (gameState.selectedCards.length === 0) {
                selectedCardsDiv.textContent = '';
            } else if (gameState.selectedCards.length === 1) {
                const card = gameState.players[0].cards[gameState.selectedCards[0]];
                selectedCardsDiv.textContent = `選択中: ${card.value}`;
            } else {
                const card1 = gameState.players[0].cards[gameState.selectedCards[0]];
                const card2 = gameState.players[0].cards[gameState.selectedCards[1]];
                selectedCardsDiv.textContent = `選択中: ${card1.value} & ${card2.value}`;
            }
        }
        

        
        function submitSelectedPair() {
            if (gameState.selectedCards.length !== 2) return;
            
            const player = gameState.players[0];
            const card1 = player.cards[gameState.selectedCards[0]];
            const card2 = player.cards[gameState.selectedCards[1]];
            
            // ペアかどうかチェック
            const isCorrectPair = card1.id === card2.id && card1.type !== card2.type;
            
            if (isCorrectPair) {
                // 正しいペア
                showPairAnimation(card1, card2);
                
                // カードを削除（インデックスの大きい方から削除）
                const sortedIndices = gameState.selectedCards.sort((a, b) => b - a);
                sortedIndices.forEach(index => {
                    player.cards.splice(index, 1);
                });
                
                setMessage('正しいペアです！');
            } else {
                // 間違ったペア
                gameState.mistakes++;
                updateMistakeCounter();
                setMessage(`間違ったペアです！ 間違い: ${gameState.mistakes}/${gameState.maxMistakes}`);
            }
            
            // 選択状態と表示をクリア
            gameState.selectedCards = [];
            updateSelectedCardsDisplay();
            
            // ペアフェーズを即座に終了
            exitPairPhase();
            updateDisplay();
            
            // 失格チェック
            if (gameState.mistakes >= gameState.maxMistakes) {
                setTimeout(() => {
                    endGameByMistakes();
                }, 1000);
                return;
            }
            
            // カードがなくなったプレイヤーをチェック
            checkForFinishedPlayers();
            
            // ゲーム終了チェック
            const playersWithCards = gameState.players.filter(p => p.cards.length > 0 && p.rank === null);
            if (playersWithCards.length <= 1) {
                setTimeout(() => {
                    endGame();
                }, 1000);
                return;
            }
            
            // ゲームフローを再開して次のターンへ
            gameState.gameFlow = true;
            
            // 正しいペアの場合は演出終了まで待ってから、間違いの場合はすぐに次のターンへ
            const delay = isCorrectPair ? 3200 : 1000;
            
            setTimeout(() => {
                // プレイヤーがまだカードを持っている場合、ターンを継続
                if (gameState.players[0].cards.length > 0) {
                    nextTurn();
                } else {
                    // プレイヤーのカードがなくなった場合、次のプレイヤーに移る
                    gameState.currentPlayer = (gameState.currentPlayer + 1) % 4;
                    nextTurn();
                }
            }, delay);
        }

        function showRules() {
            document.getElementById('rules-screen').style.display = 'flex';
        }
        
        function hideRules() {
            document.getElementById('rules-screen').style.display = 'none';
        }
        
        function startGameFromRules() {
            hideRules();
            startGame();
        }

        function toggleSound() {
            gameState.soundOn = !gameState.soundOn;
            document.getElementById('sound-btn').textContent = gameState.soundOn ? '音声ON' : '音声OFF';
        }

        function setMessage(text) {
            document.getElementById('message').textContent = text;
        }

        // 初期表示
        updateDisplay();
        updateMistakeCounter();
        
        // 初期状態でルール画面を表示
        showRules();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9722bd1dc732d3f1',t:'MTc1NTcwMTgwMS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
